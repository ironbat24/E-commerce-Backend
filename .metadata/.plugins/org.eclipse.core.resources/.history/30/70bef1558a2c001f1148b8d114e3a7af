package com.grocery.service;

import com.grocery.model.Category;
import com.grocery.model.Product;
import com.grocery.model.ProductItem;
import com.grocery.model.Units;
import com.grocery.repository.ProductRepository;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class ProductService {

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private CategoryService categoryService;
    
    @Autowired
    private UnitsService unitService;
    
    @Autowired
    private ProductItemService productItemService;
    
    public List<Product> findAllProducts() {
        return productRepository.findAll();
    }
    

    @Transactional
    public Product saveProduct(Product product) {
        if (product.getCategory() != null) {
            Category category = categoryService.findByName(product.getCategory().getName())
                    .orElseGet(() -> categoryService.saveCategory(product.getCategory()));
            product.setCategory(category);
        }
        return productRepository.save(product);
    }

    @Transactional
    public Product saveProductWithDetails(Product product) {
        // Save or find category
        Category category = product.getCategory();
        if (category != null) {
            Optional<Category> existingCategory = categoryService.findByName(category.getName());
            if (existingCategory.isPresent()) {
                product.setCategory(existingCategory.get());
            } else {
                category = categoryService.saveCategory(category);
                product.setCategory(category);
            }
        }
        
        // Save product items and units
        if (product.getProductItems() != null) {
            for (ProductItem item : product.getProductItems()) {
                Units unit = item.getUnit();
                if (unit != null) {
                    Optional<Units> existingUnit = unitService.findByUnitName(unit.getUnitName());
                    if (existingUnit.isPresent()) {
                        item.setUnit(existingUnit.get());
                    } else {
                        unit = unitService.save(unit);
                        item.setUnit(unit);
                    }
                }
                item.setProduct(product);
            }
        }

        return productRepository.save(product);
    }
    
    @Transactional
    public void deleteProduct(Long productId) {
        productRepository.deleteById(productId);
    }

    @Transactional
    public void deleteProductIfNoItemsLeft(Long productId) {
        Product product = productRepository.findById(productId).orElse(null);
        if (product != null && product.getProductItems().isEmpty()) {
            productRepository.delete(product);
        }
    }
}
