package com.grocery.service;

import com.grocery.dto.CategoryDTO;
import com.grocery.dto.ProductDTO;
import com.grocery.model.Category;
import com.grocery.model.Product;
import com.grocery.repository.CategoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class CategoryService {

    @Autowired
    private CategoryRepository categoryRepository;

    public Category save(Category category) {
        if (category.getParentCategory() != null) {
            Category savedParentCategory = findOrCreateCategory(category.getParentCategory());
            category.setParentCategory(savedParentCategory);
        }
        return categoryRepository.save(category);
    }

    public Category findOrCreateCategory(Category category) {
        Optional<Category> existingCategory = categoryRepository.findByName(category.getName());
        if (existingCategory.isPresent()) {
            return existingCategory.get();
        } else {
            return save(category);
        }
    }
    

    @Cacheable("categories")
    public List<CategoryDTO> findAllCategories() {
        List<Category> categories = categoryRepository.findAll();
        return categories.stream()
                         .map(this::convertToDTO)
                         .collect(Collectors.toList());
    }

    private CategoryDTO convertToDTO(Category category) {
        CategoryDTO dto = new CategoryDTO();
        dto.setId(category.getId());
        dto.setName(category.getName());
        dto.setParentCategoryId(category.getParentCategory() != null ? category.getParentCategory().getId() : null);
        dto.setProducts(category.getProducts() != null ? category.getProducts().stream().map(this::convertToProductDTO).collect(Collectors.toList()) : null);
        return dto;
    }

    private ProductDTO convertToProductDTO(Product product) {
        ProductDTO dto = new ProductDTO();
        dto.setProdId(product.getProdId());
        dto.setProdName(product.getProdName());
        dto.setBrand(product.getBrand());
        dto.setDescription(product.getDescription());
        dto.setImgUrl(product.getImgUrl());
        dto.setCategoryId(product.getCategory() != null ? product.getCategory().getId() : null);
        return dto;
    }
}
