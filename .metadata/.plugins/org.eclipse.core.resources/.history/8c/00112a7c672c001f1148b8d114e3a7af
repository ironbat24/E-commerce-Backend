package com.grocery.service;

import com.grocery.dto.ProductDTO;
import com.grocery.dto.ProductItemDTO;
import com.grocery.dto.UnitsDTO;
import com.grocery.model.Product;
import com.grocery.model.ProductItem;
import com.grocery.model.Units;
import com.grocery.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class ProductService {

    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private CategoryService categoryService;

    public List<ProductDTO> findAllProducts() {
        List<Product> products = productRepository.findAll();
        return products.stream()
                       .map(this::convertToDTO)
                       .collect(Collectors.toList());
    }

    public ProductDTO saveProduct(ProductDTO productDTO) {
        Product product = convertToEntity(productDTO);
        Product savedProduct = productRepository.save(product);
        return convertToDTO(savedProduct);
    }

    public ProductDTO findById(Long id) {
        return productRepository.findById(id).map(this::convertToDTO).orElse(null);
    }

    public void deleteProduct(Long id) {
        productRepository.deleteById(id);
    }

    private ProductDTO convertToDTO(Product product) {
        ProductDTO dto = new ProductDTO();
        dto.setProdId(product.getProdId());
        dto.setProdName(product.getProdName());
        dto.setBrand(product.getBrand());
        dto.setDescription(product.getDescription());
        dto.setImgUrl(product.getImgUrl());
        dto.setCategoryId(product.getCategory().getId());
        dto.setProductItems(product.getProductItems().stream().map(this::convertToProductItemDTO).collect(Collectors.toList()));
        return dto;
    }

    private Product convertToEntity(ProductDTO productDTO) {
        Product product = new Product();
        product.setProdId(productDTO.getProdId());
        product.setProdName(productDTO.getProdName());
        product.setBrand(productDTO.getBrand());
        product.setDescription(productDTO.getDescription());
        product.setImgUrl(productDTO.getImgUrl());
        product.setCategory(categoryService.convertToEntity(categoryService.findById(productDTO.getCategoryId())));
        return product;
    }

    private ProductItemDTO convertToProductItemDTO(ProductItem productItem) {
        ProductItemDTO dto = new ProductItemDTO();
        dto.setProductItemId(productItem.getProductItemId());
        dto.setMrp(productItem.getMrp());
        dto.setDiscountedPrice(productItem.getDiscountedPrice());
        dto.setQtyInStock(productItem.getQtyInStock());
        dto.setProductId(productItem.getProduct().getProdId());
        dto.setUnit(convertToUnitsDTO(productItem.getUnit()));
        return dto;
    }

    private UnitsDTO convertToUnitsDTO(Units unit) {
        UnitsDTO dto = new UnitsDTO();
        dto.setUnitId(unit.getUnitId());
        dto.setUnitName(unit.getUnitName());
        return dto;
    }
}
