package com.grocery.service;

import com.grocery.dto.CategoryDTO;
import com.grocery.model.Category;
import com.grocery.repository.CategoryRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.stream.Collectors;

@Service
public class CategoryService {

    @Autowired
    private CategoryRepository categoryRepository;

    public List<CategoryDTO> findAllCategories() {
        List<Category> categories = categoryRepository.findAll();
        return categories.stream()
                         .map(this::convertToDTO)
                         .collect(Collectors.toList());
    }

    public CategoryDTO saveCategory(CategoryDTO categoryDTO) {
        Category category = convertToEntity(categoryDTO);
        Category savedCategory = categoryRepository.save(category);
        return convertToDTO(savedCategory);
    }

    public CategoryDTO findById(Long id) {
        return categoryRepository.findById(id).map(this::convertToDTO).orElse(null);
    }

    public void deleteCategory(Long id) {
        categoryRepository.deleteById(id);
    }

    private CategoryDTO convertToDTO(Category category) {
        CategoryDTO dto = new CategoryDTO();
        dto.setId(category.getId());
        dto.setName(category.getName());
        dto.setParentCategoryId(category.getParentCategory() != null ? category.getParentCategory().getId() : null);
        dto.setProducts(category.getProducts().stream().map(this::convertToProductDTO).collect(Collectors.toList()));
        return dto;
    }

    private Category convertToEntity(CategoryDTO categoryDTO) {
        Category category = new Category();
        category.setId(categoryDTO.getId());
        category.setName(categoryDTO.getName());
        if (categoryDTO.getParentCategoryId() != null) {
            category.setParentCategory(categoryRepository.findById(categoryDTO.getParentCategoryId()).orElse(null));
        }
        return category;
    }

    private ProductDTO convertToProductDTO(Product product) {
        ProductDTO dto = new ProductDTO();
        dto.setProdId(product.getProdId());
        dto.setProdName(product.getProdName());
        dto.setBrand(product.getBrand());
        dto.setDescription(product.getDescription());
        dto.setImgUrl(product.getImgUrl());
        dto.setCategoryId(product.getCategory().getId());
        dto.setProductItems(product.getProductItems().stream().map(this::convertToProductItemDTO).collect(Collectors.toList()));
        return dto;
    }

    private ProductItemDTO convertToProductItemDTO(ProductItem productItem) {
        ProductItemDTO dto = new ProductItemDTO();
        dto.setProductItemId(productItem.getProductItemId());
        dto.setMrp(productItem.getMrp());
        dto.setDiscountedPrice(productItem.getDiscountedPrice());
        dto.setQtyInStock(productItem.getQtyInStock());
        dto.setProductId(productItem.getProduct().getProdId());
        dto.setUnit(convertToUnitsDTO(productItem.getUnit()));
        return dto;
    }

    private UnitsDTO convertToUnitsDTO(Units unit) {
        UnitsDTO dto = new UnitsDTO();
        dto.setUnitId(unit.getUnitId());
        dto.setUnitName(unit.getUnitName());
        return dto;
    }
}
