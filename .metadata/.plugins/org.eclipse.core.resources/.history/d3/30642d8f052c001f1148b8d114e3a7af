package com.grocery.service;

import com.grocery.dto.ProductDTO;
import com.grocery.model.Category;
import com.grocery.model.Product;
import com.grocery.model.ProductItem;
import com.grocery.model.Units;
import com.grocery.repository.ProductRepository;

import jakarta.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Service
public class ProductService {
    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private CategoryService categoryService;

    @Autowired
    private ProductItemService productItemService;

    @Autowired
    private UnitsService unitsService;

    public List<Product> findAll() {
        return productRepository.findAll();
    }

    public Optional<Product> findById(Long id) {
        return productRepository.findById(id);
    }

    @Transactional
    public Product save(Product product) {
        // Save category if it exists
        if (product.getCategory()!= null) {
            Category savedCategory = categoryService.findOrCreateCategory(product.getCategory());
            product.setCategory(savedCategory);
        }

        // Save product to get its ID
        Product savedProduct = productRepository.save(product);

        // Save each ProductItem and its Unit
        if (product.getProductItems() != null) {
            List<ProductItem> savedItems = product.getProductItems().stream().map(item -> {
                // Save unit if it exists
                if (item.getUnit() != null) {
                    Units savedUnit = unitsService.findOrCreateUnit(item.getUnit());
                    item.setUnit(savedUnit);
                }
                item.setProduct(savedProduct); // Set the saved product reference
                return productItemService.save(item);
            }).collect(Collectors.toList());
            savedProduct.setProductItems(savedItems);
        }

        return savedProduct;
    }


    public void deleteById(Long id) {
        productRepository.deleteById(id);
    }

    public Product convertToEntity(ProductDTO productDTO) {
        Product product = new Product();
//        product.setProdId(productDTO.getProdId());
        product.setProdName(productDTO.getProdName());
        product.setDescription(productDTO.getDescription());
        product.setBrand(productDTO.getBrand());
        product.setImgUrl(productDTO.getImgUrl());
        product.setCategory(categoryService.convertToEntity(productDTO.getCategory()));
        product.setProductItems(productDTO.getProductItems().stream().map(productItemService::convertToEntity).collect(Collectors.toList()));
        return product;
    }

    public ProductDTO convertToDTO(Product product) {
        ProductDTO productDTO = new ProductDTO();
//        productDTO.setProdId(product.getProdId());
        productDTO.setProdId(product.getProdId());
        productDTO.setProdName(product.getProdName());
        productDTO.setDescription(product.getDescription());
        productDTO.setBrand(product.getBrand());
        productDTO.setImgUrl(product.getImgUrl());
        productDTO.setCategory(categoryService.convertToDTO(product.getCategory()));
        productDTO.setProductItems(product.getProductItems().stream().map(productItemService::convertToDTO).collect(Collectors.toList()));
        return productDTO;
    }
}
